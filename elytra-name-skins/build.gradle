plugins {
	id 'java'
	id 'fabric-loom' version '1.10.1'
}

group = 'com.example'
version = '1.0.1'

repositories {
	mavenCentral()
	maven { url = 'https://maven.fabricmc.net/' }
}

dependencies {
	minecraft 'com.mojang:minecraft:1.21.8'
	mappings 'net.fabricmc:yarn:1.21.8+build.1:v2'
	modImplementation 'net.fabricmc:fabric-loader:0.17.2'
	modImplementation 'net.fabricmc.fabric-api:fabric-api:0.134.0+1.21.8'
}

loom {
	splitEnvironmentSourceSets()
}

java {
	toolchain { languageVersion = JavaLanguageVersion.of(21) }
	withSourcesJar()
}

tasks.withType(JavaCompile).configureEach { options.release = 21 }

sourceSets {
	main {
		java {
			// Excluir arquivo duplicado antigo com pacote incorreto
			exclude 'com/example/elytra/NameSkinResolver.java'
		}
	}
	client {
		java {
			// Remover abordagem antiga de mixin/feature
			exclude 'com/example/elytra/mixin/**'
			exclude 'com/example/elytra/support/NameBasedElytraFeature.java'
		}
	}
}

// Copy remapped (distributable) jar to repository root 'dist' with name '<project>-<version>.jar'
tasks.register('copyToRootDist') {
	// In Fabric Loom, 'remapJar' produces the distributable mod jar
	dependsOn tasks.named('remapJar')
	doLast {
		def remap = tasks.named('remapJar').get().archiveFile.get().asFile
		// Repository root is the parent folder of this module
		def repoRoot = project.rootProject.projectDir.toPath().resolve('..').toFile().getCanonicalFile()
		def rootDist = new File(repoRoot, 'dist')
		if (!rootDist.exists()) rootDist.mkdirs()
		def target = new File(rootDist, "${project.name}-${project.version}.jar")
		ant.copy(file: remap, tofile: target)
		println "Copied ${remap.name} -> ${target}"
	}
}
